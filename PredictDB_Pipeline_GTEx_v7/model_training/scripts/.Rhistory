setMethod("colnames<-", "SlicedData", function(x,value) {
stopifnot( class(value) == "character" );
stopifnot( length(value) == x$nCols() );
x$columnNames = value;
return(x);
})
setGeneric("rownames<-")
setMethod("rownames<-", "SlicedData", function(x,value) {
stopifnot( class(value) == "character" );
stopifnot( length(value) == x$nRows() );
start = 1;
newNameSlices = vector("list", x$nSlices());
for( i in .seq(1,x$nSlices()) ) {
nr = nrow(x$getSliceRaw(i));
newNameSlices[[i]] = value[ start:(start+nr-1) ];
start = start + nr;
}
x$rowNameSlices = newNameSlices;
return(x);
})
setGeneric("rowSums")
setMethod("rowSums", "SlicedData", function(x, na.rm = FALSE, dims = 1L) {
if(x$nSlices() == 0) {
return( numeric() );
}
stopifnot( dims == 1 );
thesum = vector("list", x$nSlices());
for( i in 1:x$nSlices() ) {
thesum[[i]] = rowSums(x$getSlice(i), na.rm)
}
return(unlist(thesum, recursive = FALSE, use.names = FALSE));
})
setGeneric("rowMeans")
setMethod("rowMeans", "SlicedData", function(x, na.rm = FALSE, dims = 1L) {
if(x$nSlices() == 0) {
return( numeric() );
}
stopifnot( dims == 1 );
thesum = vector("list", x$nSlices());
for( i in 1:x$nSlices() ) {
thesum[[i]] = rowMeans(x$getSlice(i), na.rm)
}
return(unlist(thesum, recursive = FALSE, use.names = FALSE));
})
setGeneric("colSums")
setMethod("colSums", "SlicedData", function(x, na.rm = FALSE, dims = 1L) {
if(x$nCols() == 0) {
return( numeric() );
}
stopifnot( dims == 1 );
thesum = 0;
for( i in .seq(1,x$nSlices()) ) {
thesum = thesum + colSums(x$getSlice(i), na.rm)
}
return(thesum);
})
setGeneric("colMeans")
setMethod("colMeans", "SlicedData", function(x, na.rm = FALSE, dims = 1L) {
if(x$nCols() == 0) {
return( numeric() );
}
stopifnot( dims == 1 );
thesum = 0;
thecounts = x$nRows();
for( i in .seq(1,x$nSlices()) ) {
slice = x$getSlice(i);
thesum = thesum + colSums(slice, na.rm)
if( na.rm ) {
thecounts = thecounts - colSums(is.na(slice))
}
}
return(thesum/thecounts);
})
.listBuilder <- setRefClass(".listBuilder",
fields = list(
dataEnv = "environment",
n = "integer"
),
methods = list(
initialize = function() {
dataEnv <<- new.env(hash = TRUE);
n <<- 0L;
# 			cumlength <<- 0;
return(.self);
},
add = function(x) {
if(length(x) > 0) {
n <<- n + 1L;
# 				cumlength <<- cumlength + length(x);
assign(paste(n), x, dataEnv );
}
return(.self);
},
set = function(i,x) {
i = as.integer(i);
if(length(x) > 0) {
if(i>n)
n <<- i;
assign(paste(i), x, dataEnv );
}
return(.self);
},
get = function(i) {
return(base::get(paste(i),dataEnv));
},
list = function() {
if(n==0)	return(list());
result = vector("list",n);
for( i in 1:n) {
result[[i]] = .self$get(i);
}
return(result);
},
unlist = function() {
return(base::unlist(.self$list(), recursive=FALSE, use.names = FALSE));
},
show = function() {
cat(".listBuilder object.\nIternal object in MatrixEQTL package.\n");
cat("Number of elements:", .self$n, "\n");
}
))
.histogrammer <- setRefClass(".histogrammer",
fields = list(
pvbins1 = "numeric",
statbins1 = "numeric",
hist.count = "numeric"
),
methods = list(
initialize = function (pvbins, statbins) {
if(length(pvbins)) {
ord = order(statbins);
pvbins1 <<- pvbins[ord];
statbins1 <<- statbins[ord];
statbins1[length(statbins1)] <<- .Machine$double.xmax;
hist.count <<- double(length(pvbins)-1);
}
return(.self);
},
update = function(stats.for.hist) {
h = hist(stats.for.hist, breaks = statbins1, include.lowest = TRUE, right = TRUE, plot = FALSE)$counts;
hist.count <<- hist.count + h;
},
getResults = function() {
if(!is.unsorted(pvbins1)) {
return(list(hist.bins =     pvbins1 , hist.counts =     hist.count ));
} else {
return(list(hist.bins = rev(pvbins1), hist.counts = rev(hist.count)));
}
}
))
.minpvalue <- setRefClass(".minpvalue",
fields = list(
sdata = ".listBuilder",
gdata = ".listBuilder"
),
methods = list(
initialize = function(snps, gene) {
sdata <<- .listBuilder$new();
for( ss in 1:snps$nSlices() ) {
sdata$set( ss, double(snps$GetNRowsInSlice(ss)));
}
gdata <<- .listBuilder$new();
for( gg in 1:gene$nSlices() ) {
gdata$set( gg, double(gene$GetNRowsInSlice(gg)));
}
return(.self);
},
update = function(ss, gg, astat) {
gmax = gdata$get(gg)
z1 = max.col(astat,ties.method="first");
z11 = astat[1:nrow(astat) + nrow(astat) * (z1 - 1)];
gmax = pmax(gmax, z11);
gdata$set(gg, gmax);
smax = sdata$get(ss)
z22 = apply(astat,2,max);
smax = pmax(smax, z22);
sdata$set(ss, smax);
return(.self);
},
updatecis = function(ss, gg, select.cis, astat) {
if(length(astat)>0)
{
byrows = aggregate(x=astat, by=list(row=select.cis[,1]), FUN=max);
bycols = aggregate(x=astat, by=list(col=select.cis[,2]), FUN=max);
gmax = gdata$get(gg);
gmax[byrows$row] = pmax(gmax[byrows$row], byrows$x)
gdata$set(gg, gmax);
smax = sdata$get(ss)
smax[bycols$col] = pmax(smax[bycols$col], bycols$x)
sdata$set(ss, smax);
}
return(.self);
},
getResults = function(snps, gene, pvfun) {
min.pv.snps = pvfun(sdata$unlist());
names(min.pv.snps) = rownames(snps);
min.pv.gene = pvfun(gdata$unlist());
names(min.pv.gene) = rownames(gene);
return(list(min.pv.snps = min.pv.snps, min.pv.gene = min.pv.gene));
}
))
.OutputSaver_FRD <- setRefClass(".OutputSaver_FRD",
fields = list(
sdata = ".listBuilder",
gdata = ".listBuilder",
cdata = ".listBuilder",
bdata = ".listBuilder",
fid = "list",
testfun1 = "list",
pvfun1 = "list"
),
methods = list(
initialize = function () {
sdata <<- .listBuilder$new();
gdata <<- .listBuilder$new();
cdata <<- .listBuilder$new();
bdata <<- .listBuilder$new();
fid <<- list(0);
testfun1 <<- list(0);
pvfun1 <<- list(0);
return(.self);
},
start = function(filename, statistic_name, unused1, unused2, testfun, pvfun) {
testfun1 <<- list(testfun);
pvfun1 <<- list(pvfun);
if(length(filename) > 0) {
if(class(filename) == "character") {
fid <<- list(file(description = filename, open = "wt", blocking = FALSE, raw = FALSE), TRUE);
} else {
fid <<- list(filename, FALSE)
}
writeLines( paste("SNP\tgene\t",statistic_name,"\tp-value\tFDR", sep = ""), fid[[1]]);
} else {
fid <<- list();
}
},
update = function(spos, gpos, sta, beta = NULL) {
if(length(sta)>0) {
sdata$add(spos);
gdata$add(gpos);
cdata$add(sta );
if(!is.null(beta ))
bdata$add(beta );
}
return(.self);
},
getResults = function( gene, snps, FDR_total_count) {
pvalues = NULL;
if(cdata$n > 0) {
tests = testfun1[[1]](cdata$unlist());
cdata <<- .listBuilder$new();
pvalues = pvfun1[[1]](tests);
ord = order(pvalues);
tests = tests[ord];
pvalues = pvalues[ord];
FDR = pvalues * FDR_total_count / (1:length(pvalues));
FDR[length(FDR)] = min(FDR[length(FDR)], 1);
FDR = rev(cummin(rev(FDR)));
snps_names  = rownames(snps)[sdata$unlist()[ord]];
sdata <<- .listBuilder$new();
gene_names  = rownames(gene)[gdata$unlist()[ord]];
gdata <<- .listBuilder$new();
beta = NULL;
if(bdata$n > 0)
beta = bdata$unlist()[ord];
if(length(fid)>0)	{
step = 1000; ########### 100000
for( part in 1:ceiling(length(FDR)/step) ) {
fr = (part-1)*step + 1;
to = min(part*step, length(FDR));
dump = data.frame(snps_names[fr:to],
gene_names[fr:to],
if(is.null(beta)) tests[fr:to] else list(beta[fr:to],tests[fr:to]),
pvalues[fr:to],
FDR[fr:to],
row.names = NULL,
check.rows = FALSE,
check.names = FALSE,
stringsAsFactors = FALSE);
write.table(dump, file = fid[[1]], quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE);
}
}
} else {
cat("No significant associations were found.\n", file = if(length(fid)>0){fid[[1]]}else{""});
}
if(length(fid)>0)	{
if(fid[[2]]) {
close(fid[[1]]);
}
fid <<- list();
}
if(!is.null(pvalues)) {
eqtls = list( snps = snps_names,
gene = gene_names,
statistic = tests,
pvalue = pvalues,
FDR = FDR);
if(!is.null(beta))
eqtls$beta = beta;
} else {
eqtls = list( snps = character(),
gene = character(),
beta = numeric(),
statistic = numeric(),
pvalue = numeric(),
FDR = numeric());
}
return(list(eqtls = data.frame(eqtls)));
}
)
)
.OutputSaver_direct <- setRefClass(".OutputSaver_direct",
fields = list(
gene_names = "character",
snps_names = "character",
fid = "list",
testfun1 = "list",
pvfun1 = "list"
),
methods = list(
initialize = function() {
gene_names <<- character(0);
snps_names <<- character(0);
fid <<- list(0);
testfun1 <<- list(0);
pvfun1 <<- list(0);
return(.self);
},
start = function(filename, statistic_name, snps, gene, testfun, pvfun) {
# I hope the program stops if it fails to open the file
if(class(filename) == "character") {
fid <<- list(file(description = filename, open = "wt", blocking = FALSE, raw = FALSE), TRUE);
} else {
fid <<- list(filename, FALSE)
}
writeLines(paste("SNP\tgene\t", statistic_name, "\tp-value", sep = ""), fid[[1]]);
gene_names <<- rownames(gene);
snps_names <<- rownames(snps);
testfun1 <<- list(testfun);
pvfun1 <<- list(pvfun);
},
update = function(spos, gpos, sta, beta = NULL) {
if( length(sta) == 0 )
return();
sta = testfun1[[1]](sta);
lst = list(snps = snps_names[spos], gene = gene_names[gpos], beta = beta, statistic = sta, pvalue = pvfun1[[1]](sta));
lst$beta = lst$beta;
dump2 = data.frame(lst, row.names = NULL, check.rows = FALSE, check.names = FALSE, stringsAsFactors = FALSE);
write.table(dump2, file = fid[[1]], quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE);
},
getResults = function(...) {
if(length(fid)>0)	{
if(fid[[2]]) {
close(fid[[1]]);
}
fid <<- list();
}
gene_names <<- character(0);
snps_names <<- character(0);
return(list());
}
)
)
.my.pmin = function(x, val) {
# minimum "pmin" function that can handle empty array
if(length(x) == 0) {
return(x)
} else {
return(pmin.int(x,val));
}
}
.my.pmax = function(x, val) {
# minimum "pmin" function that can handle empty array
if(length(x) == 0) {
return(x)
} else {
return(pmax.int(x,val));
}
}
.pv.nz = function(x){return( .my.pmax(x,.Machine$double.xmin) )}
.SetNanRowMean = function(x) {
if( any(is.na(x)) ) {
rowmean = rowMeans(x, na.rm = TRUE);
rowmean[ is.na(rowmean) ] = 0;
for( j in which(!complete.cases(x)) ) {
where1 = is.na( x[j, ] );
x[j,where1] = rowmean[j];
}
}
return(x);
}
.SNP_process_split_for_LOCAL_MODEL = function(x,l){
#combine snp and local information
rez = vector("list",2);
local_matrix = rbind(x,l);
for(j in 1:2){
rez[[j]] = local_matrix[j,,drop=FALSE];
}
return( rez );
.SNP_process_split_for_ANOVA = function(x,n.groups) {
# split into 2 dummy variables (or more)
# 	# Get the number of ANOVA groups
# 	n.groups = options("MatrixEQTL.ANOVA.categories")[[1]];
# 	if( is.null(n.groups))
# 		n.groups = 3;
# Unique values in x (make sure it has length of n.groups);
uniq = unique(as.vector(x));
uniq = uniq[!is.na(uniq)];
if( length(uniq) > n.groups ) {
stop("More than declared number of genotype categories is detected by ANOVA");
} else if ( length(uniq) < n.groups ) {
uniq = c(uniq, rep(min(uniq)-1, n.groups-length(uniq)));
}
# Table of frequencies for each variable (row)
freq = matrix(0, nrow(x), n.groups);
for(i in 1:n.groups) {
freq[ ,i] = rowSums(x==uniq[i], na.rm = TRUE);
}
# remove NA-s from x for convenience
x[is.na(x)] = min(uniq)-2;
# Output list of matrices
rez = vector("list",n.groups-1);
# Skip the most frequent value
md = apply(freq, 1, which.max); # most frequent value for each variable
freq[ cbind(1:nrow(x),md) ] = -1;
# The rest form dumm
for(j in 1:(n.groups-1)){
md = apply(freq, 1, which.max);
freq[ cbind(1:nrow(x),md) ] = -1;
rez[[j]] = (x == uniq[md]);
}
return( rez );
}
}
}
}
4/(sqrt(6.2)+sqrt(7)+sqrt(2.5)+sqrt(4.2))
1011/(1*678+2*227+3*56+4*28+5*8+6*!4)
1011/(1*678+2*227+3*56+4*28+5*8+6*14)
p=0.6582031
(1-p)^0*p
678/1011
(1-p)^1*p
227/1011
(1-p)^2*p
56/1011
(1-p)^4*p
(1-p)^3*p
8/1011
28/1011
(1-p)^4*p
8/1011
source("http://bioconductor.org/biocLite.R")
biocLite("CountClust")
library(CountClust)
read.data2 = function() {
x = tempfile()
download.file('https://cdn.rawgit.com/kkdey/GTExV6Brain/master/data/GTExV6Brain.rda', destfile = x, quiet=TRUE)
z = get(load((x)))
return(z)
}
install.packages("slam")
R.Version()
R.Version()
install.packages("installr")
require(installr)
library(CountClust)
install.packages("slam")
R.Version()
install.packages("installr")
library(installr)
updateR()
updateR()
source("http://bioconductor.org/biocLite.R")
biocLite("CountClust")
install.packages("slam")
R.version
R.version
updateR()
require(installr)
updateR()
R.version
setwd("R:/Basic_Sciences/Pharm/Perera_Lab/Yizhen/Hepatocyte_project/Yilin/PrediXcan/PredictDB_Pipeline_GTEx_v7/model_training/scripts")
library(dplyr)
library(RSQLite)
"%&%" <- function(a,b) paste(a,b,sep='')
driver <- dbDriver("SQLite")
unfiltered_db <- "../dbs/AA_hepatocyte.db"
filtered_db <- "../dbs/AA_hepatocyte_tw0.5_signif.db"
in_conn <- dbConnect(driver, unfiltered_db)
out_conn <- dbConnect(driver, filtered_db)
model_summaries <- dbGetQuery(in_conn, 'select * from model_summaries where zscore_pval < 0.05 and rho_avg > 0.1')
model_summaries <- model_summaries %>% dplyr::rename(pred.perf.R2 = rho_avg_squared, genename = gene_name, pred.perf.pval = zscore_pval, n.snps.in.model = n_snps_in_model)
model_summaries$pred.perf.qval <- NA
dbWriteTable(out_conn, 'extra', model_summaries)
construction <- dbGetQuery(in_conn, 'select * from construction')
dbWriteTable(out_conn, 'construction', construction)
sample_info <- dbGetQuery(in_conn, 'select * from sample_info')
dbWriteTable(out_conn, 'sample_info', sample_info)
weights <- dbGetQuery(in_conn, 'select * from weights')
weights <- weights %>% dplyr::filter(gene %in% model_summaries$gene) %>% dplyr::rename(eff_allele = alt, ref_allele = ref, weight = beta)
dbWriteTable(out_conn, 'weights', weights, overwrite = TRUE)
dbGetQuery(out_conn, "CREATE INDEX weights_rsid ON weights (rsid)")
dbGetQuery(out_conn, "CREATE INDEX weights_gene ON weights (gene)")
dbGetQuery(out_conn, "CREATE INDEX weights_rsid_gene ON weights (rsid, gene)")
dbGetQuery(out_conn, "CREATE INDEX gene_model_summary ON extra (gene)")
setwd("/Volumes/fsmresfiles/Basic_Sciences/Pharm/Perera_Lab/Yizhen/Hepatocyte_project/Yilin/PrediXcan/PredictDB_Pipeline_GTEx_v7/model_training/scripts")
model_summary <- read.table("../dbs/model_summaries.txt", header = T, stringsAsFactors = F)
model_summaries[1:3,1:3]
which(model_summaries$cv_zscore_pval<0.05 & model_summaries$rho_avg > 0.1)
length(which(model_summaries$cv_zscore_pval<0.05 & model_summaries$rho_avg > 0.1))
dim(model_summaries)
